@import "drawer-variables";

@function drawer-infix($criteria) {
  $bp: quote($criteria);
  @if($bp == "touch") {
    @return "-touch";
  } @else {
    @each $b,$min in $grid-breakpoints {
      @if quote($b) == $bp {
        @if $min == 0 {
          @return null;
        } @else {
          @return -#{$b};
        }
      }
    }
  }
}

@mixin drawer-temporary($bp) {
  $infix: drawer-infix($bp);
  $offset: (0 - $drawer-width);
  .drawer#{$infix}-temporary {
    margin-left: $offset;
    position: $drawer-temporary-position;
    z-index: $drawer-temporary-zindex;
    width: $drawer-width;
    .drawer-header, .drawer-footer {
      display: flex;
    }
  }
  html.persistent, html.permanent {
    .drawer.drawer#{$infix}-temporary  {
      position: $drawer-persistent-position;
      z-index: $drawer-persistent-zindex;
      .drawer-header, .drawer-footer {
        display: none;
      }
    }
  }
  html.on {

    .drawer#{$infix}-temporary {
      margin-left: 0;
    }
    .drawer-backdrop {
      position: fixed;
      opacity: $drawer-backdrop-opacity;
    }
  }
}

@mixin drawer-persistent($bp) {
  $infix: drawer-infix($bp);
  $offset: (0 - $drawer-width);
  .drawer.drawer#{$infix}-persistent {
    margin-left: 0;
    position: $drawer-persistent-position;
    z-index: $drawer-persistent-zindex;
    width: $drawer-width;
    .drawer-header, .drawer-footer {
      display: none;
    }
  }
  .m#{$infix}-drawer {
    margin-left: $drawer-width;
  }
  .p#{$infix}-drawer {
    padding-left: $drawer-width;
  }
  html.off {
    .drawer#{$infix}-persistent {
      margin-left: $offset;
    }
    .m#{$infix}-drawer {
      margin-left: inherit;
    }
    .p#{$infix}-drawer {
      padding-left: inherit;
    }
  }
}

@mixin drawer-permanent($bp) {
  $infix: drawer-infix($bp);
  .drawer.drawer#{$infix}-permanent {
    margin-left: 0;
    position: $drawer-permanent-position;
    z-index: $drawer-permanent-zindex;
    .drawer-header, .drawer-footer {
      display: none;
    }
  }
  .m#{$infix}-drawer {
    margin-left: $drawer-width;
  }
  .p#{$infix}-drawer {
    padding-left: $drawer-width;
  }
}

@mixin drawer-icons {
  @if component("icons") {
    //noinspection SassScssUnresolvedVariable
    > .#{$icon-css-prefix} {
      width: $drawer-icon-width;
      color: $drawer-icon-color;
      margin-right: 1rem;
    }
    @if component-feature("icons","font") {
      //noinspection SassScssUnresolvedVariable
      > i.#{$icon-css-prefix} {
        font-size: $drawer-icon-font-size;
        line-height: $drawer-icon-height;
        vertical-align: -15%;
        text-align: left;
      }
    }
    @if component-feature("icons","svg") {
      //noinspection SassScssUnresolvedVariable
      > .#{$icon-css-prefix} {
        height: $drawer-icon-height;
      }
    }
  }
}